import copy
import json
import time

import pandas as pd

match_amounts_to_estimate = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 1, 5, 10, 100, 1000]
#match_amounts_to_estimate = [0.30]

'''
    Some data conversion functions.
'''
def get_data():
    # 'grant_id', 'contributor_profile_id', 'amount_per_period_usdt'
    gdm = [[220.0, 67442.0, 18.925], [223.0, 73659.0, 10.0], [329.0, 3221.0, 1.0], [40.0, 72410.0, 5.0], [215.0, 72410.0, 5.0], [139.0, 7766.0, 1.0], [203.0, 7766.0, 1.0], [203.0, 40857.0, 1.0], [236.0, 7766.0, 1.0], [236.0, 40857.0, 1.0], [223.0, 3221.0, 5.000000000000001], [160.0, 9015.0, 20.0], [215.0, 9015.0, 20.0], [195.0, 9015.0, 20.0], [140.0, 9015.0, 19.774], [160.0, 62087.0, 1.0], [215.0, 72030.0, 20.0], [215.0, 62087.0, 2.0], [237.0, 62087.0, 5.000000000000001], [130.0, 62087.0, 2.0], [231.0, 7921.0, 10.0], [329.0, 4142.0, 20.0], [239.0, 14954.0, 10.0], [40.0, 37341.0, 5.000000000000001], [40.0, 66903.0, 5.000000000000001], [215.0, 66903.0, 5.000000000000001], [203.0, 66903.0, 5.000000000000001], [215.0, 65578.0, 25.0], [223.0, 4183.0, 2.925], [40.0, 46914.0, 50.0], [160.0, 72027.0, 250.0], [160.0, 7929.0, 115.0], [160.0, 49909.0, 10.0], [231.0, 38469.0, 11.000000000000002], [239.0, 1626.0, 1.25], [160.0, 72027.0, 1000.0], [195.0, 26608.0, 10.0], [215.0, 26608.0, 10.0], [160.0, 26608.0, 10.0], [223.0, 26608.0, 10.0], [238.0, 73707.0, 1.0000000000000002], [215.0, 66760.0, 1.1], [223.0, 66760.0, 1.1], [195.0, 66760.0, 1.1], [220.0, 67034.0, 5.0], [237.0, 72055.0, 5.0], [160.0, 72055.0, 4.75], [215.0, 72060.0, 5.0], [160.0, 72060.0, 5.0], [40.0, 72060.0, 10.0], [237.0, 72054.0, 5.263], [30.0, 72054.0, 5.263], [238.0, 72060.0, 2.0], [40.0, 72054.0, 5.0], [237.0, 72060.0, 2.007], [211.0, 72054.0, 5.263], [215.0, 72062.0, 15.0], [215.0, 72062.0, 15.0], [215.0, 72062.0, 15.0], [195.0, 66760.0, 1.1], [223.0, 66760.0, 1.1], [203.0, 15344.0, 5.0], [223.0, 4208.0, 0.99], [223.0, 60163.0, 5.0], [40.0, 4205.0, 2.0], [160.0, 59923.0, 10.0], [215.0, 66543.0, 10.0], [160.0, 72089.0, 10.0], [30.0, 72089.0, 20.0], [160.0, 66543.0, 5.0], [40.0, 66543.0, 5.0], [237.0, 57434.0, 10.0], [215.0, 5552.0, 1.0], [174.0, 5552.0, 1.0], [238.0, 5552.0, 1.0], [195.0, 67029.0, 5.0], [160.0, 67029.0, 5.0], [215.0, 67029.0, 5.0], [160.0, 62432.0, 3.0], [156.0, 68611.0, 10.0], [160.0, 67123.0, 5.0], [40.0, 62432.0, 5.0], [215.0, 62432.0, 1.0], [223.0, 62432.0, 5.0], [30.0, 62432.0, 3.0], [237.0, 62432.0, 2.0], [203.0, 67029.0, 5.0], [223.0, 23657.0, 1.0], [215.0, 66887.0, 5.0], [215.0, 72125.0, 2.0], [160.0, 66887.0, 5.0], [203.0, 66887.0, 5.0], [40.0, 66887.0, 5.0], [238.0, 66887.0, 5.0], [174.0, 66887.0, 5.0], [223.0, 66957.0, 10.0], [223.0, 57434.0, 10.0], [40.0, 36885.0, 5.0], [160.0, 36885.0, 1.5], [237.0, 36885.0, 10.0], [223.0, 36885.0, 10.0], [174.0, 6167.0, 5.0], [160.0, 61060.0, 5.0], [139.0, 27653.0, 1.0], [40.0, 7479.0, 5.0], [237.0, 7479.0, 5.0], [215.0, 66888.0, 5.0], [237.0, 25152.0, 3.0], [160.0, 37341.0, 2.0], [160.0, 72188.0, 1.0], [160.0, 72190.0, 1.0], [231.0, 72191.0, 1.0], [237.0, 72085.0, 3.0], [160.0, 66691.0, 10.0], [203.0, 49909.0, 15.0], [237.0, 7890.0, 10.0], [174.0, 46914.0, 10.0], [215.0, 72215.0, 10.0], [215.0, 46914.0, 10.0], [160.0, 46914.0, 10.0], [215.0, 72215.0, 10.0], [160.0, 66997.0, 16.0], [237.0, 46914.0, 10.0], [203.0, 66787.0, 10.0], [40.0, 66787.0, 10.0], [160.0, 66787.0, 10.0], [215.0, 72221.0, 4.0], [215.0, 72221.0, 20.0], [40.0, 67058.0, 20.0], [215.0, 67058.0, 20.0], [40.0, 72224.0, 5.0], [237.0, 67058.0, 20.0], [160.0, 66102.0, 5.0], [237.0, 66102.0, 10.0], [223.0, 66102.0, 10.0], [223.0, 66383.0, 10.0], [237.0, 72055.0, 5.0], [237.0, 17721.0, 2.0], [160.0, 68190.0, 2.007], [223.0, 72237.0, 5.0], [160.0, 72117.0, 5.0], [237.0, 72117.0, 5.0], [40.0, 72117.0, 5.0], [237.0, 26608.0, 10.0], [238.0, 26608.0, 10.0], [215.0, 72117.0, 5.0], [237.0, 60097.0, 1.0], [231.0, 5256.0, 10.0], [160.0, 66961.0, 1.0], [160.0, 72259.0, 10.55], [40.0, 72259.0, 20.0], [30.0, 72259.0, 5.0], [238.0, 72059.0, 1.0], [215.0, 72219.0, 1.0], [237.0, 10662.0, 5.0], [160.0, 72451.0, 5.0], [238.0, 73297.0, 0.95], [160.0, 66218.0, 20.0], [203.0, 66913.0, 9.965], [203.0, 72277.0, 10.0], [195.0, 1461.0, 1.0], [329.0, 61801.0, 10.0], [203.0, 61801.0, 1.0000000000000002], [160.0, 66566.0, 5.0], [160.0, 72317.0, 5.0], [174.0, 66957.0, 10.0], [160.0, 66957.0, 10.0], [195.0, 66366.0, 1.0], [40.0, 28361.0, 250.0], [238.0, 9015.0, 10.0], [160.0, 66798.0, 1.0], [223.0, 66798.0, 3.0], [237.0, 72173.0, 50.0], [160.0, 65578.0, 25.0], [130.0, 66366.0, 3.0], [203.0, 66956.0, 5.0], [239.0, 72277.0, 5.0], [203.0, 66957.0, 10.0], [231.0, 42982.0, 3.0], [195.0, 42608.0, 15.0], [231.0, 60918.0, 2.0], [139.0, 67123.0, 1.1], [195.0, 61060.0, 10.66], [160.0, 67123.0, 1.0], [215.0, 67123.0, 10.0], [174.0, 19830.0, 100.0], [139.0, 19830.0, 5.0], [40.0, 67123.0, 8.999999999999998], [329.0, 26608.0, 10.0], [195.0, 1626.0, 1.0], [160.0, 72410.0, 5.0], [160.0, 62630.0, 1.0], [40.0, 62630.0, 1.0], [203.0, 62630.0, 4.0], [40.0, 41145.0, 1.0], [215.0, 66805.0, 1.0], [215.0, 41145.0, 1.0], [160.0, 61801.0, 10.0], [40.0, 47888.0, 5.0], [329.0, 47888.0, 5.0], [30.0, 47888.0, 5.0], [223.0, 47888.0, 5.0], [215.0, 66877.0, 1.0], [204.0, 57842.0, 49.999], [174.0, 71695.0, 2.0], [237.0, 67142.0, 2.0], [40.0, 71695.0, 2.0], [220.0, 66913.0, 1.0], [195.0, 12535.0, 1.0], [40.0, 72844.0, 5.000000000000001], [139.0, 72780.0, 10.0], [238.0, 11109.0, 6.81], [237.0, 11109.0, 20.0], [204.0, 67029.0, 4.999999999999999], [305.0, 73544.0, 5.0], [160.0, 68053.0, 1.0], [174.0, 7766.0, 1.0], [174.0, 7766.0, 0.95], [139.0, 65057.0, 5.0], [174.0, 66743.0, 1.1146540753838932], [174.0, 68053.0, 1.0], [237.0, 65057.0, 5.0], [237.0, 66866.0, 1.0], [204.0, 2857.0, 5.0], [174.0, 5276.0, 5.0], [204.0, 10732.0, 1.0], [239.0, 2857.0, 5.0], [215.0, 61801.0, 10.0], [174.0, 61801.0, 5.0], [40.0, 61801.0, 10.0], [223.0, 66787.0, 10.0], [231.0, 71695.0, 2.0], [40.0, 5552.0, 1.0], [40.0, 5552.0, 9.0], [160.0, 5552.0, 2.5], [139.0, 5552.0, 2.5], [203.0, 5552.0, 2.5], [223.0, 5552.0, 2.5009999999999994], [160.0, 5256.0, 10.0], [139.0, 68611.0, 1.0], [174.0, 68611.0, 1.0], [160.0, 68611.0, 1.0], [215.0, 68611.0, 1.0], [40.0, 68611.0, 1.0], [231.0, 64789.0, 1.0], [238.0, 68611.0, 1.0], [215.0, 66743.0, 1.1146540753838932], [40.0, 19311.0, 5.0], [220.0, 72047.0, 5.0], [215.0, 30472.0, 1.0], [238.0, 2857.0, 5.0], [160.0, 30472.0, 1.0], [203.0, 63379.0, 5.0], [63.0, 63379.0, 5.0], [237.0, 63379.0, 5.0], [40.0, 63379.0, 5.0], [160.0, 63253.0, 5.0], [220.0, 63379.0, 5.0], [156.0, 57434.0, 10.0], [238.0, 67048.0, 1.0], [40.0, 57434.0, 10.0], [237.0, 66213.0, 5.0], [40.0, 66213.0, 5.0], [160.0, 66213.0, 5.0], [237.0, 66213.0, 5.0], [203.0, 67123.0, 5.0], [174.0, 66213.0, 5.0], [139.0, 66213.0, 5.0], [139.0, 68053.0, 1.0], [223.0, 62528.0, 10.0], [215.0, 39597.0, 21.0], [215.0, 72479.0, 1.0], [40.0, 39597.0, 21.0], [160.0, 39597.0, 21.0], [237.0, 39597.0, 21.0], [40.0, 72479.0, 1.0000000000000002], [237.0, 72479.0, 1.0000000000000002], [371.0, 72860.0, 5.0], [238.0, 39597.0, 21.0], [231.0, 2184.0, 1.0000000000000002], [160.0, 72479.0, 1.0000000000000002], [195.0, 42931.0, 5.0], [130.0, 42931.0, 1.0000000000000002], [211.0, 42931.0, 1.0000000000000002], [203.0, 42931.0, 1.0000000000000002], [220.0, 42931.0, 5.0], [130.0, 42931.0, 1.0000000000000002], [238.0, 26617.0, 10.0], [40.0, 26617.0, 20.0], [160.0, 67051.0, 1.0000000000000002], [237.0, 67051.0, 5.0], [220.0, 68145.0, 7.0], [160.0, 26617.0, 10.0], [231.0, 23550.0, 5.0], [238.0, 67051.0, 5.0], [40.0, 67051.0, 5.0], [238.0, 66543.0, 5.0], [139.0, 72053.0, 1.0], [237.0, 28361.0, 1350.0000000000002], [237.0, 22762.0, 5.0], [203.0, 66819.0, 10.0], [215.0, 66819.0, 5.0], [40.0, 66819.0, 5.0], [238.0, 28361.0, 1350.0000000000002], [139.0, 66819.0, 5.0], [160.0, 66819.0, 5.0], [238.0, 66819.0, 5.0], [237.0, 65578.0, 10.0], [174.0, 66811.0, 5.0], [139.0, 72213.0, 1.0], [160.0, 72138.0, 10.0], [203.0, 72138.0, 10.0], [215.0, 72138.0, 25.0], [237.0, 72138.0, 35.0], [223.0, 72138.0, 25.0], [238.0, 72138.0, 35.0], [40.0, 72138.0, 50.0], [30.0, 66702.0, 5.0], [40.0, 66702.0, 5.0], [139.0, 72817.0, 5.0], [231.0, 63164.0, 5.264], [238.0, 67057.0, 1.0000000000000002], [160.0, 68583.0, 1.0000000000000002], [203.0, 68583.0, 1.0000000000000002], [174.0, 68583.0, 1.0000000000000002], [40.0, 68583.0, 1.0000000000000002], [215.0, 68583.0, 1.0000000000000002], [238.0, 68583.0, 1.0000000000000002], [220.0, 68583.0, 1.0000000000000002], [139.0, 68583.0, 1.0000000000000002], [238.0, 66956.0, 10.0], [160.0, 72534.0, 1.0], [40.0, 72534.0, 1.0], [237.0, 72534.0, 1.0], [238.0, 72534.0, 1.0], [215.0, 72534.0, 1.0], [203.0, 10773.0, 1.975], [204.0, 53070.0, 5.0], [174.0, 10773.0, 1.0], [220.0, 25152.0, 3.0], [204.0, 66913.0, 10.0], [220.0, 9530.0, 1.0], [203.0, 9538.0, 5.0], [237.0, 72844.0, 5.000000000000001], [203.0, 66913.0, 1.0], [237.0, 61801.0, 5.0], [204.0, 22762.0, 5.0], [215.0, 66719.0, 7.0], [329.0, 72558.0, 23.0], [63.0, 72084.0, 10.0], [215.0, 72563.0, 10.0], [139.0, 22762.0, 4.0], [237.0, 72563.0, 15.0], [238.0, 72563.0, 10.0], [160.0, 72563.0, 15.0], [203.0, 72563.0, 20.0], [174.0, 72563.0, 10.0], [40.0, 72563.0, 15.0], [40.0, 66682.0, 1.0], [40.0, 72563.0, 15.0], [174.0, 66682.0, 1.0], [220.0, 4324.0, 10.0], [203.0, 60192.0, 2.4], [160.0, 66805.0, 1.0], [139.0, 66805.0, 1.0], [160.0, 8780.0, 10.0], [215.0, 66538.0, 1.0000000000000002], [215.0, 72595.0, 6.25273035510442], [204.0, 66956.0, 10.0], [204.0, 66957.0, 250.0], [238.0, 53147.0, 4.0], [40.0, 67000.0, 1.0000000000000002], [238.0, 59642.0, 1.0000000000000002], [305.0, 71995.0, 10.0], [40.0, 2197.0, 1.0000000000000002], [160.0, 72844.0, 5.000000000000001], [237.0, 2197.0, 25.0], [305.0, 66597.0, 5.0], [237.0, 5292.0, 10.0], [40.0, 5292.0, 10.0], [237.0, 72626.0, 10.0], [160.0, 66833.0, 10.0], [238.0, 66833.0, 10.0], [40.0, 66833.0, 10.0], [215.0, 66833.0, 10.0], [220.0, 4900.0, 1.0], [329.0, 72279.0, 46.0], [215.0, 72279.0, 50.0], [203.0, 66547.0, 1.0], [215.0, 67048.0, 2.0], [40.0, 66547.0, 1.0], [238.0, 8193.0, 100.0], [237.0, 66547.0, 1.0], [238.0, 66547.0, 1.0], [215.0, 72633.0, 50.0], [215.0, 66547.0, 1.0], [329.0, 72633.0, 22.7], [160.0, 66547.0, 1.0], [40.0, 72633.0, 50.0], [203.0, 72635.0, 3.96], [238.0, 66806.0, 1.2], [215.0, 66809.0, 5.0], [238.0, 66702.0, 5.0], [237.0, 72642.0, 1.02], [305.0, 8521.0, 19.8], [160.0, 66857.0, 20.0], [223.0, 72277.0, 5.000000000000001], [238.0, 66857.0, 50.0], [40.0, 66857.0, 3.9], [40.0, 73819.0, 5.0], [237.0, 10773.0, 1.0], [174.0, 10773.0, 33.0], [40.0, 10773.0, 5.0], [329.0, 72653.0, 10.0], [40.0, 67070.0, 5.0], [23.0, 67070.0, 5.0], [160.0, 72454.0, 1.0], [40.0, 72454.0, 1.0], [215.0, 72454.0, 1.0], [215.0, 67070.0, 5.0], [237.0, 67070.0, 5.0], [237.0, 72454.0, 1.0], [238.0, 72454.0, 1.0], [174.0, 72454.0, 1.0], [160.0, 72034.0, 5.0], [203.0, 61060.0, 10.0], [260.0, 72662.0, 50.0], [237.0, 72034.0, 5.0], [260.0, 72662.0, 50.0], [223.0, 3934.0, 5.0], [130.0, 3934.0, 5.0], [40.0, 3934.0, 5.0], [49.0, 60057.0, 5.0], [63.0, 9752.0, 3.0], [238.0, 72674.0, 2.0], [160.0, 66717.0, 3.5000000000000004], [237.0, 66717.0, 3.5000000000000004], [215.0, 66717.0, 3.5000000000000004], [40.0, 66717.0, 3.5000000000000004], [204.0, 61060.0, 10.0], [40.0, 72363.0, 2.0], [329.0, 72420.0, 20.0], [174.0, 72363.0, 1.0], [204.0, 57483.0, 1.0], [160.0, 72572.0, 150.0], [238.0, 72572.0, 100.0], [237.0, 72572.0, 200.0], [237.0, 72084.0, 10.0], [204.0, 22762.0, 1.1000000000000003], [204.0, 69706.0, 1.0], [204.0, 72280.0, 25.0], [160.0, 72863.0, 5.000000000000001], [215.0, 72572.0, 65.00000000000001], [223.0, 72572.0, 25.0], [40.0, 72572.0, 184.99000000000004], [174.0, 72572.0, 25.0], [160.0, 68857.0, 5.0], [215.0, 68857.0, 2.0], [174.0, 68857.0, 2.0], [139.0, 68857.0, 2.0], [260.0, 66913.0, 1.0], [160.0, 17668.0, 20.0], [40.0, 17668.0, 19.5], [238.0, 73264.0, 105.0], [237.0, 17668.0, 20.0], [30.0, 46914.0, 10.0], [223.0, 46914.0, 10.0], [174.0, 66811.0, 1.0], [203.0, 11420.0, 1.0], [237.0, 72630.0, 1.0], [174.0, 66811.0, 1.0], [40.0, 4142.0, 20.0], [305.0, 66410.0, 25.0], [156.0, 73708.0, 70.71], [160.0, 72698.0, 1.0], [160.0, 72213.0, 1.0], [204.0, 5256.0, 10.0], [238.0, 72844.0, 5.000000000000001], [203.0, 59428.0, 1.0], [215.0, 72358.0, 50.0], [160.0, 8668.0, 1.0], [174.0, 59428.0, 1.0], [139.0, 72844.0, 5.000000000000001], [237.0, 66871.0, 4.9], [40.0, 59428.0, 1.0], [223.0, 49982.0, 20.0], [238.0, 59428.0, 1.0], [215.0, 71695.0, 2.0], [204.0, 54350.0, 10.0], [112.0, 71695.0, 3.0], [160.0, 59428.0, 1.0], [238.0, 63253.0, 5.0], [237.0, 72119.0, 1.0], [139.0, 73120.0, 61.54], [203.0, 9530.0, 1.0], [305.0, 60097.0, 2.0], [160.0, 60097.0, 2.0], [237.0, 10732.0, 1.0], [139.0, 71491.0, 3.0], [139.0, 10732.0, 1.0], [40.0, 64953.0, 1.0], [223.0, 64953.0, 1.0], [204.0, 66805.0, 1.0], [215.0, 72681.0, 3.0], [260.0, 23393.0, 5.0], [203.0, 54350.0, 3.0], [237.0, 72388.0, 5.0], [231.0, 63945.0, 1.06], [204.0, 68165.0, 50.0], [130.0, 4142.0, 20.0], [305.0, 42931.0, 0.95], [160.0, 72609.0, 1.0], [215.0, 72609.0, 1.0], [238.0, 72609.0, 1.0], [40.0, 72609.0, 1.0], [174.0, 72609.0, 1.0], [237.0, 11420.0, 1.0], [63.0, 4142.0, 20.0], [49.0, 60061.0, 4.0], [314.0, 69639.0, 10.0], [329.0, 66377.0, 30.000000000000007], [160.0, 64953.0, 3.0], [215.0, 67116.0, 5.0], [40.0, 67116.0, 5.0], [237.0, 64953.0, 1.0], [174.0, 2857.0, 5.0], [203.0, 47261.0, 5.0], [324.0, 72714.0, 10.0], [49.0, 4142.0, 20.0], [204.0, 62630.0, 5.000000000000001], [238.0, 11420.0, 1.0], [204.0, 67778.0, 2.3], [238.0, 72863.0, 5.000000000000001], [329.0, 22762.0, 1.0], [203.0, 71995.0, 5.000000000000001], [215.0, 72726.0, 1.0], [237.0, 4142.0, 20.0], [204.0, 62630.0, 5.000000000000001], [63.0, 11420.0, 5.000000000000001], [204.0, 15344.0, 5.000000000000001], [160.0, 71695.0, 2.0], [174.0, 22762.0, 5.0], [237.0, 54785.0, 1.06], [49.0, 60063.0, 4.0], [174.0, 72742.0, 10.0], [220.0, 68165.0, 1.0], [305.0, 23645.0, 1.0], [74.0, 11420.0, 1.0], [204.0, 4001.0, 10.0], [237.0, 68502.0, 1.0], [238.0, 9530.0, 1.0], [305.0, 72860.0, 15.0], [40.0, 72863.0, 10.0], [305.0, 72864.0, 10.0], [220.0, 6829.0, 5.0], [220.0, 72386.0, 7.000000000000001], [130.0, 72854.0, 5.000000000000001], [204.0, 72492.0, 5.000000000000001], [40.0, 68502.0, 2.0], [40.0, 72854.0, 5.000000000000001], [40.0, 2857.0, 5.0], [204.0, 6829.0, 105.0], [174.0, 68502.0, 2.0], [237.0, 72854.0, 5.000000000000001], [204.0, 9530.0, 3.0], [223.0, 9015.0, 25.0], [309.0, 68502.0, 1.0], [324.0, 62696.0, 20.0], [204.0, 62630.0, 5.000000000000001], [204.0, 72277.0, 10.0], [204.0, 66543.0, 5.000000000000001], [329.0, 9530.0, 1.0], [215.0, 9530.0, 1.0], [204.0, 59542.0, 30.587345944924998], [203.0, 72280.0, 5.0], [215.0, 2857.0, 5.0], [49.0, 73563.0, 30.0], [174.0, 72844.0, 3.0], [174.0, 65101.0, 999.9999999999998], [204.0, 72961.0, 1.0], [305.0, 45987.0, 10.53], [130.0, 72054.0, 5.0], [215.0, 72844.0, 3.0], [174.0, 141.0, 3.0], [238.0, 72626.0, 2.0], [203.0, 68487.0, 10.0], [203.0, 4324.0, 10.0], [204.0, 4900.0, 1.0], [204.0, 9538.0, 3.0], [237.0, 68399.0, 1.0], [203.0, 63190.0, 1.0], [362.0, 72667.0, 1.02], [174.0, 73021.0, 1.0], [223.0, 66566.0, 2.0], [130.0, 68399.0, 1.0], [332.0, 37749.0, 10.000000000000002], [238.0, 73021.0, 1.0], [238.0, 68399.0, 1.0], [215.0, 73144.0, 5.0], [215.0, 73021.0, 1.0], [40.0, 63448.0, 1.0], [204.0, 63190.0, 5.0], [238.0, 63448.0, 1.0], [160.0, 72841.0, 5.0], [237.0, 72841.0, 5.0], [237.0, 349.0, 4.999999999999999], [156.0, 73748.0, 10.0], [174.0, 72841.0, 5.0], [40.0, 4324.0, 10.0], [204.0, 73036.0, 10.0], [40.0, 72184.0, 1.0], [231.0, 67142.0, 10.0], [160.0, 11233.0, 10.0], [237.0, 11233.0, 50.0], [174.0, 72629.0, 10.0], [238.0, 59533.0, 1.0], [238.0, 72854.0, 0.5], [174.0, 64983.0, 1.0], [305.0, 46401.0, 1.0], [223.0, 72823.0, 4.999999999999999], [40.0, 64983.0, 1.0], [49.0, 73037.0, 1.0], [223.0, 72823.0, 4.999999999999999], [329.0, 66957.0, 10.0], [237.0, 9015.0, 10.0], [332.0, 72901.0, 4.0], [204.0, 64983.0, 1.0], [260.0, 66566.0, 2.0], [332.0, 66566.0, 2.0], [204.0, 13212.0, 1.0], [238.0, 349.0, 5.000000000000001], [237.0, 47261.0, 10.000000000000002], [215.0, 64983.0, 1.0], [160.0, 72629.0, 1.0], [160.0, 66844.0, 5.000000000000001], [174.0, 72817.0, 5.000000000000001], [238.0, 72629.0, 1.0], [238.0, 63719.0, 5.0], [332.0, 73149.0, 16.399999999999995], [223.0, 3993.0, 10.0], [238.0, 2646.0, 1.0], [63.0, 73013.0, 5.0], [203.0, 64983.0, 1.0], [223.0, 12535.0, 1.0], [203.0, 73700.0, 8.348000828750001], [63.0, 73700.0, 3.3392003315000003], [260.0, 9645.0, 1.0], [220.0, 5256.0, 5.0], [204.0, 72045.0, 4.75], [324.0, 54727.0, 1.0], [223.0, 15169.0, 10.0], [160.0, 64983.0, 1.0], [238.0, 7479.0, 1.0], [329.0, 72807.0, 1.0], [329.0, 40691.0, 1.0], [204.0, 6754.0, 5.0], [204.0, 9645.0, 1.0], [174.0, 72117.0, 1.0], [40.0, 72280.0, 3.0], [260.0, 60127.0, 25.0], [204.0, 73120.0, 30.77], [49.0, 73562.0, 30.0], [237.0, 72213.0, 1.0], [174.0, 5276.0, 0.0], [204.0, 64302.0, 89.99999999999999], [160.0, 73008.0, 5.0], [238.0, 60008.0, 1.06], [238.0, 60207.0, 1.0], [237.0, 8269.0, 3.0], [305.0, 63253.0, 100.0], [204.0, 59348.0, 9.999999999999998], [203.0, 59348.0, 9.999999999999998], [174.0, 5276.0, 1000.0], [174.0, 37341.0, 1.0], [332.0, 63190.0, 4.999999999999999], [237.0, 32289.0, 1.0], [160.0, 8780.0, 5.0], [238.0, 70807.0, 5.0], [238.0, 71098.0, 0.95], [352.0, 66819.0, 1.0], [238.0, 64296.0, 1.0], [204.0, 72888.0, 10.0], [40.0, 72629.0, 1.0], [220.0, 66383.0, 1.0], [237.0, 71098.0, 1.0], [329.0, 44431.0, 5.0], [324.0, 66844.0, 1.2], [174.0, 72889.0, 2.0], [174.0, 72889.0, 2.0], [220.0, 37099.0, 30.000000000000007], [49.0, 72993.0, 1.0], [40.0, 32289.0, 1.0], [238.0, 54350.0, 1.0], [204.0, 4324.0, 10.0], [160.0, 71098.0, 1.0], [40.0, 26979.0, 10.0], [237.0, 67048.0, 2.0], [174.0, 65572.0, 5.0], [238.0, 72213.0, 1.0], [260.0, 10107.0, 3.0], [231.0, 1873.0, 2.0], [204.0, 2288.0, 1.0], [174.0, 67048.0, 2.0], [238.0, 65572.0, 5.0], [204.0, 71724.0, 1.0], [329.0, 62528.0, 8.999999999999998], [238.0, 65572.0, 5.0], [371.0, 72976.0, 5.0], [203.0, 71724.0, 1.0], [238.0, 37341.0, 1.0], [204.0, 2288.0, 99.0], [204.0, 66957.0, 499.9999999999999], [204.0, 4812.0, 10.0], [160.0, 72902.0, 1.0], [204.0, 66814.0, 1.0], [40.0, 65572.0, 2.0], [305.0, 73112.0, 5.0], [215.0, 72902.0, 1.0], [40.0, 66903.0, 5.000000000000001], [63.0, 5184.0, 100.0], [223.0, 1461.0, 1.0], [238.0, 72119.0, 1.0], [40.0, 9645.0, 1.0], [305.0, 67730.0, 4.0], [204.0, 72892.0, 1.1000000000000003], [195.0, 9645.0, 1.0], [160.0, 66913.0, 1.0], [238.0, 9645.0, 1.0], [329.0, 9645.0, 1.0], [260.0, 66805.0, 1.0], [305.0, 73191.0, 2.0], [195.0, 33787.0, 1.0], [237.0, 66697.0, 4.678], [260.0, 73006.0, 1.0], [215.0, 72629.0, 1.0], [223.0, 71724.0, 5.0], [260.0, 72417.0, 5.0], [231.0, 72908.0, 1.0], [204.0, 72803.0, 1.0], [40.0, 9645.0, 1.0], [204.0, 60158.0, 3.0], [260.0, 72899.0, 1.0000000000000002], [380.0, 72084.0, 10.0], [332.0, 73125.0, 31.0], [237.0, 66956.0, 9.999999999999998], [237.0, 72629.0, 1.0], [238.0, 66872.0, 1.0], [223.0, 65563.0, 10.0], [366.0, 72101.0, 5.0], [237.0, 12535.0, 1.0], [371.0, 24986.0, 1.0], [204.0, 66566.0, 5.0], [305.0, 73836.0, 4.999999999999999], [223.0, 73120.0, 30.77], [220.0, 73843.0, 99.99999999999999], [329.0, 73010.0, 15.0], [237.0, 67116.0, 5.0], [160.0, 47261.0, 5.0], [260.0, 1461.0, 1.0], [220.0, 7921.0, 1.0], [40.0, 73120.0, 30.77], [366.0, 69639.0, 6.942], [215.0, 73120.0, 123.08], [260.0, 9530.0, 5.0], [160.0, 72726.0, 1.0], [174.0, 73120.0, 92.31], [139.0, 5094.0, 10.0], [305.0, 2646.0, 1.0], [160.0, 73120.0, 123.08], [40.0, 18002.0, 6.982999999999999], [329.0, 68399.0, 2.0], [329.0, 62480.0, 15.0], [195.0, 3263.0, 5.0], [160.0, 3263.0, 5.0], [215.0, 66856.0, 1.0], [204.0, 73315.0, 5.0], [174.0, 72248.0, 1.0], [260.0, 72277.0, 5.0], [237.0, 21753.0, 5.25], [231.0, 66150.0, 40.0], [237.0, 66856.0, 1.0], [237.0, 72359.0, 5.0], [215.0, 64958.0, 1.0], [156.0, 66150.0, 40.0], [260.0, 72844.0, 3.0], [160.0, 64958.0, 1.0], [238.0, 66856.0, 1.0], [329.0, 6754.0, 1.0], [130.0, 73021.0, 1.0], [40.0, 73021.0, 1.0], [237.0, 72359.0, 100.0], [63.0, 66981.0, 5.0], [237.0, 69252.0, 1.5], [223.0, 66743.0, 1.1146540753838932], [305.0, 1461.0, 1.0], [160.0, 66981.0, 5.0], [40.0, 66856.0, 1.0], [237.0, 40691.0, 1.0], [195.0, 73242.0, 45.0], [237.0, 69151.0, 1.0], [156.0, 73751.0, 10.0], [220.0, 40691.0, 1.0], [130.0, 72726.0, 1.0], [40.0, 69151.0, 1.0], [204.0, 66566.0, 7.017000000000001], [279.0, 72184.0, 1.0], [329.0, 5882.0, 20.0], [305.0, 66566.0, 1.0], [204.0, 13212.0, 20.0], [139.0, 477.0, 20.0], [38.0, 8269.0, 5.0], [332.0, 72277.0, 10.0], [40.0, 67016.0, 2.0], [63.0, 72860.0, 50.0], [160.0, 67016.0, 2.0], [238.0, 67016.0, 2.0], [215.0, 67016.0, 2.0], [160.0, 73706.0, 1.0000000000000002], [231.0, 8521.0, 24.75], [237.0, 8521.0, 94.05], [40.0, 72213.0, 1.0], [237.0, 65441.0, 1.0], [220.0, 21.0, 15.0], [63.0, 23657.0, 1.0], [329.0, 73315.0, 5.0], [174.0, 34590.0, 1.0], [160.0, 7479.0, 1.0], [40.0, 66491.0, 5.0], [238.0, 4181.0, 3.0], [238.0, 72027.0, 10.0], [237.0, 73120.0, 92.31], [215.0, 72027.0, 10.0], [174.0, 34590.0, 2.0], [223.0, 69151.0, 1.0], [40.0, 72027.0, 10.0], [237.0, 72027.0, 10.0], [238.0, 66859.0, 1.0], [40.0, 66750.0, 5.0], [223.0, 72844.0, 5.0], [329.0, 72844.0, 3.0], [220.0, 73210.0, 6.0], [195.0, 11417.0, 1.0], [215.0, 67051.0, 5.0], [305.0, 65441.0, 5.0], [203.0, 69151.0, 1.0], [160.0, 73242.0, 45.0], [215.0, 73242.0, 45.0], [237.0, 2288.0, 1.0], [40.0, 2288.0, 1.0], [238.0, 66871.0, 10.205], [215.0, 66276.0, 1.0], [329.0, 69151.0, 1.0], [223.0, 73637.0, 9.0], [160.0, 66913.0, 1.0], [204.0, 62630.0, 100.0], [160.0, 620.0, 10.0], [238.0, 620.0, 10.0], [40.0, 47261.0, 5.0], [260.0, 6829.0, 1.4719250706749998], [329.0, 73140.0, 5.0], [238.0, 69151.0, 1.0], [329.0, 47261.0, 5.0], [237.0, 72451.0, 5.0], [237.0, 6754.0, 1.0], [237.0, 22914.0, 10.0], [174.0, 66896.0, 1.0], [204.0, 22914.0, 10.0], [215.0, 22914.0, 10.0], [203.0, 73315.0, 5.0], [238.0, 22914.0, 10.0], [305.0, 73446.0, 3.0], [238.0, 47261.0, 5.0], [30.0, 47261.0, 5.0], [215.0, 47261.0, 5.0], [204.0, 66782.0, 1.0000000000000002], [156.0, 26637.0, 9.983], [204.0, 73210.0, 1.053], [329.0, 10762.0, 5.0], [231.0, 73210.0, 1.053], [238.0, 72863.0, 1.06], [238.0, 67051.0, 5.0], [237.0, 3892.0, 10.6], [40.0, 73144.0, 5.0], [223.0, 59336.0, 1.0000000000000002], [329.0, 66896.0, 1.0], [237.0, 66852.0, 20.0], [366.0, 66150.0, 13.37], [40.0, 73588.0, 5.0], [160.0, 69252.0, 2.0], [156.0, 66150.0, 40.0], [237.0, 67029.0, 5.0], [329.0, 20021.0, 5.0], [160.0, 73588.0, 5.0], [366.0, 8088.0, 4.200000000000001], [329.0, 22914.0, 10.0], [215.0, 66859.0, 1.0], [174.0, 72309.0, 0.9500000000000002], [160.0, 22914.0, 10.0], [305.0, 73413.0, 21.06], [260.0, 66539.0, 5.0], [160.0, 66857.0, 5.0], [345.0, 24986.0, 1.0], [215.0, 72986.0, 2.0], [305.0, 73575.0, 5.0], [237.0, 72986.0, 2.0], [223.0, 73548.0, 1.0], [237.0, 73551.0, 1.0], [204.0, 66383.0, 10.000000000000002], [40.0, 28361.0, 492.1990266371999], [260.0, 66917.0, 5.0], [329.0, 69257.0, 10.0], [231.0, 73344.0, 5.290000000000001], [329.0, 59327.0, 50.0], [156.0, 72863.0, 5.0], [160.0, 2651.0, 20.0], [16.0, 24986.0, 1.0], [160.0, 67106.0, 10.000000000000002], [160.0, 20397.0, 4.95], [30.0, 72986.0, 2.0], [40.0, 20397.0, 5.0], [223.0, 20397.0, 9.900000000000002], [174.0, 66857.0, 5.0], [366.0, 47261.0, 5.0], [305.0, 72452.0, 5.0], [40.0, 66276.0, 3.4460221076], [237.0, 8668.0, 5.0], [237.0, 66276.0, 3.4460221076], [40.0, 72698.0, 1.0], [204.0, 72901.0, 10.0], [160.0, 66276.0, 3.4460221076], [211.0, 24986.0, 1.0], [40.0, 67297.0, 5.0], [174.0, 73548.0, 1.0], [204.0, 72901.0, 10.0], [238.0, 66276.0, 2.5845165807000003], [237.0, 72117.0, 1.0], [305.0, 73333.0, 5.0], [156.0, 28361.0, 1539.3719437212005], [316.0, 20397.0, 4.95], [30.0, 20397.0, 5.0], [156.0, 15169.0, 10.0], [156.0, 28361.0, 888.0000000000001], [215.0, 72410.0, 2.0], [160.0, 72807.0, 3.0], [332.0, 18002.0, 2.0], [237.0, 72410.0, 2.0], [237.0, 18002.0, 1.0], [238.0, 72807.0, 3.0], [174.0, 18002.0, 2.0], [215.0, 72807.0, 1.9], [305.0, 20397.0, 4.95], [130.0, 18002.0, 5.0], [329.0, 65441.0, 1.0], [174.0, 67029.0, 5.0], [220.0, 58260.0, 402.21500000000003], [238.0, 67029.0, 5.0], [139.0, 67029.0, 5.0], [40.0, 69252.0, 2.0], [174.0, 73550.0, 1.0], [204.0, 24986.0, 1.0], [329.0, 9838.0, 4.2], [156.0, 65441.0, 5.0], [203.0, 24986.0, 1.0], [160.0, 73550.0, 1.0], [223.0, 73293.0, 1.0], [215.0, 72698.0, 1.0], [332.0, 23645.0, 14.999999999999996], [63.0, 4110.0, 5.0], [156.0, 73727.0, 50.0], [366.0, 4110.0, 4.2], [203.0, 73715.0, 2.0], [237.0, 7921.0, 1.0], [174.0, 4110.0, 5.0], [223.0, 4110.0, 5.0], [380.0, 46914.0, 5.0], [238.0, 73302.0, 1.0], [260.0, 66773.0, 1.0], [238.0, 73550.0, 1.0], [130.0, 4110.0, 5.0], [63.0, 73302.0, 1.0], [332.0, 4110.0, 15.0], [231.0, 72451.0, 1.0], [63.0, 8521.0, 10.0], [203.0, 8521.0, 19.8], [392.0, 73598.0, 1.0], [380.0, 28361.0, 1548.5808745944003], [238.0, 67106.0, 10.000000000000002], [223.0, 9838.0, 4.2], [223.0, 8521.0, 13.0], [366.0, 9838.0, 4.2], [231.0, 67106.0, 50.0], [329.0, 72451.0, 5.000000000000001], [40.0, 72293.0, 2.0], [380.0, 73522.0, 4.712185534524998], [237.0, 62406.0, 10.0], [329.0, 8521.0, 15.0], [156.0, 73755.0, 10.0], [220.0, 8521.0, 15.0], [174.0, 72293.0, 2.0], [223.0, 64956.0, 10.000000000000002], [40.0, 67106.0, 10.000000000000002], [156.0, 73842.0, 9.999999999999998], [362.0, 3221.0, 1.0], [305.0, 68028.0, 1.0], [223.0, 73627.0, 1.053], [204.0, 9838.0, 4.2], [160.0, 66680.0, 1.0], [215.0, 67106.0, 10.000000000000002], [305.0, 71257.0, 10.0], [305.0, 65592.0, 9.999999999999998], [215.0, 67106.0, 10.000000000000002], [49.0, 73559.0, 30.0], [195.0, 67106.0, 10.000000000000002], [174.0, 28361.0, 492.1990266371999], [305.0, 73580.0, 9.0], [215.0, 73679.0, 1.0], [329.0, 51032.0, 20.0], [223.0, 30078.0, 1.0], [237.0, 67106.0, 10.000000000000002], [211.0, 51032.0, 50.0], [204.0, 72188.0, 10.0], [223.0, 39244.0, 99.99999999999999], [215.0, 28361.0, 492.1990266371999], [237.0, 60983.0, 1.1], [237.0, 4907.0, 10.0], [237.0, 30078.0, 1.0], [160.0, 66561.0, 2.0], [174.0, 72026.0, 20.0], [40.0, 73361.0, 10.0], [49.0, 67106.0, 10.000000000000002], [139.0, 69014.0, 1.0000000000000002], [223.0, 72054.0, 100.0], [40.0, 73679.0, 1.0], [40.0, 67083.0, 1.0000000000000002], [40.0, 73675.0, 5.0], [174.0, 66680.0, 1.0], [160.0, 73679.0, 1.0], [160.0, 73361.0, 5.0], [223.0, 67083.0, 1.0000000000000002], [305.0, 73688.0, 10.0], [329.0, 30078.0, 1.0], [215.0, 73675.0, 2.0], [23.0, 63189.0, 250.0], [40.0, 67096.0, 1.0000000000000002], [174.0, 73679.0, 1.0], [237.0, 73675.0, 1.5], [352.0, 66680.0, 1.0], [237.0, 63189.0, 499.9999999999999], [49.0, 41526.0, 1.0], [160.0, 30078.0, 1.0], [204.0, 67096.0, 1.0000000000000002], [215.0, 30078.0, 1.0], [238.0, 73361.0, 5.0], [156.0, 73846.0, 9.999999999999998], [203.0, 73866.0, 1.0], [220.0, 73581.0, 5.0], [40.0, 30078.0, 1.0], [238.0, 30078.0, 1.0], [211.0, 69252.0, 2.0], [204.0, 66957.0, 250.0], [332.0, 73866.0, 1.0], [223.0, 67083.0, 1.0000000000000002], [237.0, 73637.0, 1.0], [305.0, 73508.0, 9.999999999999998], [314.0, 73866.0, 1.0], [223.0, 73633.0, 10.0], [237.0, 69257.0, 1.0], [237.0, 66745.0, 4.0], [223.0, 66745.0, 1.0000000000000002], [220.0, 73235.0, 4.75], [223.0, 4907.0, 10.0], [204.0, 23278.0, 1.0], [63.0, 66745.0, 1.0000000000000002], [40.0, 73361.0, 5.0], [237.0, 23513.0, 5.0], [380.0, 63189.0, 100.0], [237.0, 72741.0, 4.999999999999999], [156.0, 73883.0, 9.999999999999998], [223.0, 63102.0, 3.0], [130.0, 66900.0, 1.055], [40.0, 63189.0, 250.0], [237.0, 66615.0, 1.0], [160.0, 73010.0, 0.95], [231.0, 63189.0, 50.0], [204.0, 2039.0, 1.0], [305.0, 18954.0, 50.0], [371.0, 72976.0, 2.0], [160.0, 67083.0, 1.0000000000000002], [237.0, 67083.0, 1.0000000000000002], [215.0, 67083.0, 1.0000000000000002], [49.0, 73834.0, 30.0], [204.0, 48085.0, 1.0000000000000002], [203.0, 73210.0, 2.48], [220.0, 67145.0, 20.0], [220.0, 73210.0, 5.0], [40.0, 66794.0, 5.0], [160.0, 73639.0, 1.0000000000000002], [156.0, 73697.0, 10.0], [237.0, 73639.0, 1.0000000000000002], [203.0, 66680.0, 1.0], [40.0, 73639.0, 1.0000000000000002], [223.0, 73639.0, 1.0000000000000002], [215.0, 73639.0, 1.0000000000000002], [174.0, 73639.0, 1.0000000000000002], [40.0, 66694.0, 100.0], [204.0, 73639.0, 1.0000000000000002], [160.0, 67062.0, 5.0], [30.0, 73639.0, 1.0000000000000002], [238.0, 67062.0, 5.0], [23.0, 73639.0, 5.0], [139.0, 73639.0, 1.0000000000000002], [203.0, 73639.0, 1.0000000000000002], [380.0, 67062.0, 5.0], [220.0, 1946.0, 6.0], [160.0, 73698.0, 10.0], [40.0, 67062.0, 10.0], [204.0, 73715.0, 2.0], [204.0, 60158.0, 50.0], [139.0, 73698.0, 10.0], [223.0, 69252.0, 4.999999999999999], [156.0, 73699.0, 10.0], [238.0, 69252.0, 2.0], [40.0, 73754.0, 1.3999999999999997], [156.0, 73696.0, 10.0], [156.0, 73696.0, 10.0], [156.0, 73696.0, 10.0], [156.0, 73696.0, 10.0], [156.0, 73696.0, 10.0], [237.0, 67062.0, 5.0], [305.0, 73715.0, 2.0], [237.0, 58768.0, 100.0], [160.0, 72359.0, 100.0], [130.0, 63189.0, 50.0], [152.0, 63189.0, 100.0], [238.0, 66680.0, 1.0], [139.0, 73651.0, 1.0], [332.0, 73651.0, 1.0], [329.0, 73851.0, 4.999999999999999], [139.0, 66680.0, 5.0], [160.0, 66615.0, 1.0], [215.0, 67062.0, 5.0], [160.0, 66710.0, 10.0], [204.0, 60128.0, 1.0], [203.0, 35008.0, 1.06], [156.0, 73699.0, 10.0], [329.0, 66745.0, 2.0], [333.0, 73704.0, 5.0], [40.0, 66745.0, 1.0000000000000002], [40.0, 73851.0, 4.999999999999999], [40.0, 23513.0, 5.0], [40.0, 23513.0, 5.0], [116.0, 63189.0, 50.0], [329.0, 60128.0, 1.0], [139.0, 73737.0, 5.0], [237.0, 66743.0, 1.0], [160.0, 66743.0, 1.0], [40.0, 66743.0, 1.0], [329.0, 68747.0, 9.999999999999998], [40.0, 58768.0, 100.0], [215.0, 58768.0, 35.0], [23.0, 66900.0, 1.0], [237.0, 73862.0, 9.999999999999998], [174.0, 58768.0, 30.0], [40.0, 60128.0, 1.0], [316.0, 63189.0, 100.0], [223.0, 66900.0, 1.055], [238.0, 58768.0, 30.0], [329.0, 58768.0, 30.0], [237.0, 73651.0, 1.0], [49.0, 73834.0, 30.0], [238.0, 72606.0, 9.999999999999998], [329.0, 66366.0, 1.0], [204.0, 58768.0, 30.0], [160.0, 73651.0, 1.0], [40.0, 73651.0, 1.0], [215.0, 73651.0, 1.0], [174.0, 73651.0, 1.0], [30.0, 66900.0, 1.0], [380.0, 66378.0, 2.0], [203.0, 73651.0, 1.0], [305.0, 73651.0, 1.0], [231.0, 73651.0, 1.0], [204.0, 62528.0, 20.0], [239.0, 73651.0, 1.0], [366.0, 73651.0, 1.0], [238.0, 73651.0, 1.0], [204.0, 73651.0, 1.0], [223.0, 73651.0, 1.0], [220.0, 73651.0, 1.0], [329.0, 73651.0, 1.0], [156.0, 73651.0, 1.0], [260.0, 73651.0, 1.0], [195.0, 73651.0, 1.0], [63.0, 73651.0, 1.0], [30.0, 73651.0, 1.0], [49.0, 73651.0, 1.0], [130.0, 73651.0, 1.0], [49.0, 60163.0, 1.0], [40.0, 60163.0, 1.0], [204.0, 5246.0, 1.0], [220.0, 72773.0, 5.0], [329.0, 72773.0, 5.0], [238.0, 68467.0, 1.0], [40.0, 73788.0, 1.0], [238.0, 66809.0, 5.0], [204.0, 39128.0, 5.0], [160.0, 73788.0, 1.0], [30.0, 73788.0, 5.0], [324.0, 73788.0, 5.0], [215.0, 73788.0, 1.0], [371.0, 73056.0, 1.0], [203.0, 66792.0, 1.0], [237.0, 4282.0, 1.0], [237.0, 66792.0, 1.0], [223.0, 66792.0, 1.0], [260.0, 3993.0, 1.0], [156.0, 23513.0, 50.0], [40.0, 7963.0, 7.0], [329.0, 7963.0, 4.75], [366.0, 66378.0, 4.2], [220.0, 7925.0, 506.0], [237.0, 7963.0, 4.75], [366.0, 66378.0, 0.69], [237.0, 66378.0, 2.0], [237.0, 2288.0, 1.0], [237.0, 66378.0, 2.0], [160.0, 7963.0, 7.0], [329.0, 2288.0, 1.0], [329.0, 66378.0, 2.0], [156.0, 73825.0, 10.0], [231.0, 72191.0, 1.0], [49.0, 63898.0, 9.999999999999998], [223.0, 73829.0, 10.0], [220.0, 73756.0, 100.0], [174.0, 35008.0, 1.06], [160.0, 35008.0, 1.0], [174.0, 35008.0, 1.05], [215.0, 35008.0, 1.1], [40.0, 35008.0, 1.07], [237.0, 35008.0, 1.06], [139.0, 35008.0, 1.061], [238.0, 35008.0, 1.06], [237.0, 73835.0, 1.5], [238.0, 72193.0, 1.0], [237.0, 5552.0, 2.5], [237.0, 68467.0, 1.0], [156.0, 73699.0, 10.0], [40.0, 69252.0, 2.0], [174.0, 141.0, 1.25], [329.0, 255.0, 1.0], [195.0, 697.0, 0.4545454545454545], [220.0, 1626.0, 1.6666666666666667], [305.0, 1873.0, 0.38461538461538464], [203.0, 1873.0, 0.38461538461538464], [239.0, 1873.0, 0.38461538461538464], [220.0, 1873.0, 0.38461538461538464], [220.0, 2085.0, 5.0], [195.0, 3221.0, 0.3125], [30.0, 3221.0, 0.3125], [238.0, 3221.0, 0.3125], [220.0, 3221.0, 0.3125], [220.0, 3261.0, 5.0], [160.0, 3379.0, 0.20833333333333331], [30.0, 3379.0, 0.20833333333333331], [195.0, 3379.0, 0.20833333333333331], [329.0, 3379.0, 0.20833333333333331], [40.0, 4205.0, 0.7142857142857143], [195.0, 4599.0, 0.625], [204.0, 4599.0, 0.625], [40.0, 4599.0, 0.625], [329.0, 4853.0, 0.38461538461538464], [40.0, 4853.0, 0.38461538461538464], [130.0, 4853.0, 0.38461538461538464], [204.0, 4853.0, 0.38461538461538464], [30.0, 4853.0, 0.38461538461538464], [223.0, 4853.0, 0.38461538461538464], [237.0, 4853.0, 0.38461538461538464], [220.0, 5628.0, 5.0], [30.0, 7364.0, 1.25], [332.0, 7766.0, 1.0], [329.0, 7766.0, 1.0], [231.0, 7921.0, 5.0], [314.0, 8521.0, 5.0], [220.0, 8752.0, 2.5], [203.0, 9645.0, 1.25], [239.0, 11269.0, 1.6666666666666667], [329.0, 15344.0, 0.625], [40.0, 15344.0, 0.625], [220.0, 23278.0, 5.0], [215.0, 26608.0, 0.25], [174.0, 27653.0, 0.29411764705882354], [324.0, 27653.0, 0.29411764705882354], [40.0, 27653.0, 0.29411764705882354], [309.0, 27653.0, 0.29411764705882354], [237.0, 27653.0, 0.29411764705882354], [139.0, 27653.0, 0.29411764705882354], [238.0, 27653.0, 0.29411764705882354], [237.0, 29173.0, 1.25], [30.0, 29173.0, 1.25], [220.0, 37391.0, 5.0], [195.0, 42608.0, 1.6666666666666667], [231.0, 42982.0, 5.0], [204.0, 57842.0, 5.0], [220.0, 58476.0, 5.0], [220.0, 59405.0, 1.0], [220.0, 59466.0, 5.0], [220.0, 59881.0, 2.5], [329.0, 59983.0, 5.0], [231.0, 60918.0, 5.0], [362.0, 62073.0, 1.6666666666666667], [231.0, 63164.0, 5.0], [231.0, 63945.0, 5.0], [231.0, 64789.0, 5.0], [220.0, 65920.0, 5.0], [329.0, 66150.0, 1.25], [220.0, 66262.0, 5.0], [211.0, 66366.0, 1.0], [195.0, 66366.0, 1.0], [112.0, 66366.0, 1.0], [231.0, 66366.0, 1.0], [30.0, 66366.0, 1.0], [237.0, 66379.0, 0.7142857142857143], [305.0, 66410.0, 0.625], [40.0, 66543.0, 1.6666666666666667], [204.0, 66566.0, 1.6666666666666667], [40.0, 66680.0, 0.625], [174.0, 66682.0, 0.8333333333333334], [139.0, 66690.0, 0.8333333333333334], [223.0, 66698.0, 1.0], [40.0, 66698.0, 1.0], [160.0, 66805.0, 0.4166666666666667], [203.0, 66805.0, 0.4166666666666667], [238.0, 66859.0, 0.7142857142857143], [160.0, 66888.0, 2.5], [238.0, 67029.0, 1.0], [215.0, 67029.0, 1.0], [160.0, 67029.0, 1.0], [203.0, 67029.0, 1.0], [220.0, 67034.0, 1.25], [160.0, 67051.0, 0.8333333333333334], [238.0, 67051.0, 0.8333333333333334], [237.0, 67051.0, 0.8333333333333334], [40.0, 67051.0, 0.8333333333333334], [220.0, 67145.0, 2.5], [238.0, 67145.0, 2.5], [220.0, 67442.0, 5.0], [174.0, 68583.0, 0.35714285714285715], [160.0, 68583.0, 0.35714285714285715], [215.0, 68583.0, 0.35714285714285715], [40.0, 68583.0, 0.35714285714285715], [238.0, 68583.0, 0.35714285714285715], [139.0, 68583.0, 0.35714285714285715], [203.0, 69259.0, 1.25], [231.0, 70936.0, 5.0], [220.0, 71044.0, 5.0], [305.0, 71257.0, 5.0], [231.0, 71961.0, 5.0], [329.0, 72034.0, 5.0], [220.0, 72047.0, 5.0], [231.0, 72191.0, 5.0], [139.0, 72229.0, 1.6666666666666667], [220.0, 72643.0, 5.0], [220.0, 72655.0, 5.0], [220.0, 72810.0, 5.0], [305.0, 72862.0, 5.0], [260.0, 72899.0, 1.6666666666666667], [220.0, 72971.0, 2.5], [231.0, 73082.0, 5.0], [305.0, 73084.0, 5.0], [174.0, 73098.0, 5.0], [220.0, 73128.0, 5.0], [305.0, 73138.0, 2.5], [260.0, 73138.0, 2.5], [220.0, 73151.0, 5.0], [220.0, 73209.0, 5.0], [220.0, 73210.0, 1.0], [231.0, 73228.0, 5.0], [220.0, 73257.0, 5.0], [231.0, 73317.0, 5.0], [231.0, 73344.0, 5.0], [231.0, 73354.0, 5.0], [305.0, 73373.0, 5.0], [305.0, 73413.0, 5.0], [220.0, 73512.0, 5.0], [220.0, 73513.0, 5.0], [220.0, 73581.0, 5.0], [220.0, 73608.0, 5.0], [220.0, 73676.0, 5.0], [220.0, 73724.0, 5.0], [220.0, 73731.0, 5.0], [231.0, 73738.0, 5.0], [220.0, 73739.0, 5.0], [220.0, 73741.0, 5.0], [220.0, 73756.0, 5.0], [231.0, 73761.0, 5.0], [220.0, 73847.0, 5.0], [220.0, 73874.0, 5.0]]

    return gdm



'''
    Helper function that translates existing grant data structure to a list of lists.

    Args:
        {
            'id': (string) ,
            'contibutions' : [
                {
                    contributor_profile (str) : contribution_amount (int)
                }
            ]
        }

    Returns:
        [[grant_id (str), user_id (str), contribution_amount (float)]]
'''
def translate_data(grants_data):
    grants_list = []
    for g in grants_data:
        grant_id = g.get('id')
        for c in g.get('contributions'):
            val = [grant_id] + [list(c.keys())[0], list(c.values())[0]]
            grants_list.append(val)
    return grants_list


'''
    Helper function that aggregates contributions by contributor, and then uses the aggregated contributors by contributor and calculates total contributions by unique pairs.

    Args:
        from get_data or translate_data:
        [[grant_id (str), user_id (str), contribution_amount (float)]]

    Returns:
        {grant_id (str): {user_id (str): aggregated_amount (float)}}

        and

        {user_id (str): {user_id (str): pair_total (float)}}
'''
def aggregate_contributions(grant_contributions):
    contrib_dict = {}
    for proj, user, amount in grant_contributions:
        if proj not in contrib_dict:
            contrib_dict[proj] = {}
        contrib_dict[proj][user] = contrib_dict[proj].get(user, 0) + amount

    tot_overlap = {}
    for proj, contribz in contrib_dict.items():
        for k1, v1 in contribz.items():
            if k1 not in tot_overlap:
                tot_overlap[k1] = {}
            for k2, v2 in contribz.items():
                if k2 not in tot_overlap[k1]:
                    tot_overlap[k1][k2] = 0
                tot_overlap[k1][k2] += (v1 * v2) ** 0.5
    return contrib_dict, tot_overlap



'''
    Helper function that aggregates contributions by contributor, and then uses the aggregated contributors by contributor and calculates total contributions by unique pairs.

    Args:
        from get_data or translate_data: [[grant_id (str), user_id (str), contribution_amount (float)]]

        grant_id: grant being donated to

        live_user: user doing the donation

    Returns:
        {grant_id (str): {user_id (str): aggregated_amount (float)}}

        and

        {user_id (str): {user_id (str): pair_total (float)}}
'''
def aggregate_contributions_live(grant_contributions, grant_id=86.0, live_user=99999999.0):
    # # get users who have contributed to grant_id to get tot_overlap
    # contrib_dict = {}
    # contrib_users = []
    # for proj, user, amount in tech:
    #     if proj == grant_id:
    #         if user not in contrib_users:
    #             contrib_users.append(user)
    # for proj, user, amount in tech:
    #     if user in contrib_users:
    #         if proj not in contrib_dict:
    #             contrib_dict[proj] = {}
    #         contrib_dict[proj][user] = contrib_dict[proj].get(user, 0) + amount
    contrib_dict = {}
    for proj, user, amount in grant_contributions:
        if proj not in contrib_dict:
            contrib_dict[proj] = {}
        contrib_dict[proj][user] = contrib_dict[proj].get(user, 0) + amount
    contrib_dict_list = []
    tot_overlap_list = []
    for amount in match_amounts_to_estimate:
        contrib_dict_copy = copy.deepcopy(contrib_dict)
        contrib_dict_copy[grant_id][live_user] = contrib_dict_copy[grant_id].get(live_user, 0) + amount
        contrib_dict_list.append(contrib_dict_copy)
        tot_overlap = {}
        for proj, contribz in contrib_dict_copy.items():
            for k1, v1 in contribz.items():
                if k1 not in tot_overlap:
                    tot_overlap[k1] = {}
                for k2, v2 in contribz.items():
                    if k2 not in tot_overlap[k1]:
                        tot_overlap[k1][k2] = 0
                    tot_overlap[k1][k2] += (v1 * v2) ** 0.5
        tot_overlap_list.append(tot_overlap)
        # print(f'finished predicting {amount}')
    return contrib_dict_list, tot_overlap_list



'''
    Helper function that runs the pairwise clr formula while "binary" searching for the correct threshold.

    Args:
    
        aggregated_contributions: {grant_id (str): {user_id (str): aggregated_amount (float)}}
        pair_totals: {user_id (str): {user_id (str): pair_total (float)}}
        threshold: pairwise coefficient
        total_pot: total pot for the tech or media round, default tech

    Returns:
        totals: total clr award by grant, normalized by the normalization factor
'''
def calculate_new_clr(aggregated_contributions, pair_totals, threshold=25.0, total_pot=125000.0):
    bigtot = 0
    totals = []
    # single donation doesn't get a match
    for proj, contribz in aggregated_contributions.items():
        tot = 0
        for k1, v1 in contribz.items():
            for k2, v2 in contribz.items():
                if k2 > k1:  # remove pairs
                    # # pairwise matching formula
                    # tot += (v1 * v2) ** 0.5 * min(1, threshold / pair_totals[k1][k2])
                    # vitalik's division formula
                    tot += ((v1 * v2) ** 0.5) / (pair_totals[k1][k2] / threshold + 1)
        bigtot += tot
        totals.append({'id': proj, 'clr_amount': tot})
    # find normalization factor
    normalization_factor = float(bigtot) / float(total_pot)
    # modify totals
    for result in totals:
        result['clr_amount'] = result['clr_amount'] / normalization_factor
    # # check total = pot
    # print(f'total pot check = {sum([x["clr_amount"] for x in totals])}')
    
    return totals 



# '''
#     Helper function that runs the pairwise clr formula while "binary" searching for the correct threshold.

#     Args:

#         set variables:
#         lower_bound: set at 0.0
#         total_pot: set at 100000.0
        
#         from the helper function aggregate_contributions:
#         aggregated_contributions: {grant_id (str): {user_id (str): aggregated_amount (float)}}
#         pair_totals: {user_id (str): {user_id (str): pair_total (float)}}

#     Returns:
#         bigtot: should equal total pot
#         totals:
# '''
# def calculate_clr(aggregated_contributions, pair_totals, lower_bound=0.0, total_pot=125000.0):   
#     lower = lower_bound
#     upper = total_pot
#     iterations = 0
#     while iterations < 100:
#         threshold = (lower + upper) / 2
#         iterations += 1
#         if iterations == 100:
#             print("--- %s seconds ---" % (time.time() - start_time))
#             print(f'iterations reached, bigtot at {bigtot} with threshold {threshold}')
#             # print totals
#             break
#         bigtot = 0
#         totals = []
#         # single donation doesn't get a match
#         for proj, contribz in aggregated_contributions.items():
#             tot = 0
#             for k1, v1 in contribz.items():
#                 for k2, v2 in contribz.items():
#                     if k2 > k1:  # remove pairs
#                         # # pairwise matching formula
#                         # tot += (v1 * v2) ** 0.5 * min(1, threshold / pair_totals[k1][k2])
#                         # vitalik's division formula
#                         tot += ((v1 * v2) ** 0.5) / (pair_totals[k1][k2] / threshold + 1)
#             bigtot += tot
#             # totals.append((proj, tot))
#             totals.append({'id': proj, 'clr_amount': tot})
#         # print(f'threshold {threshold} yields bigtot {bigtot} vs totalpot {total_pot} at iteration {iterations}')
#         if bigtot == total_pot:
#             print("--- %s seconds ---" % (time.time() - start_time))
#             print(f'bigtot {bigtot} = total_pot {total_pot} with threshold {threshold}')
#             # print(totals)
#             break
#         elif bigtot < total_pot:
#             lower = threshold
#         elif bigtot > total_pot:
#             upper = threshold
#     return bigtot, totals 



'''
    Runs final tech grants calculations

    Args: none

    Returns: tech grants clr award amounts 
'''
def run_calc(data, total_pot=125000):
    start_time = time.time()
    aggregated_contributions, pair_totals = aggregate_contributions(data)
    res = calculate_new_clr(aggregated_contributions, pair_totals, total_pot=total_pot)
    print('tech final calc runtime --- %s seconds ---' % (time.time() - start_time))
    return res


'''
    Runs live donation incremental calculations

    Args: live grant being donated to, live user doing the donation

    Returns: live donation incremental clr award amounts 
'''
def run_live_calc(data, grant_id=86.0, live_user=99999999.0, total_pot=125000):
    start_time = time.time()
    aggregated_contributions_list, pair_totals_list = aggregate_contributions_live(data, grant_id=grant_id, live_user=live_user)
    clr_curve = []
    for x, y in zip(aggregated_contributions_list, pair_totals_list):
        res = calculate_new_clr(x, y, total_pot=total_pot)
        pred = list(filter(lambda x: x['id'] == grant_id, res))[0]['clr_amount']
        clr_curve.append(pred)

    print('live calc runtime --- %s seconds ---' % (time.time() - start_time))

    return_dict = {}
    for i in range(0, len(match_amounts_to_estimate)):
        key = match_amounts_to_estimate[i]
        val = clr_curve[i]
        return_dict[key] = val

    return return_dict

if __name__ == '__main__':
    run_calc(get_data())
    res = run_live_calc()
    print(res)
